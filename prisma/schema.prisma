// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

model Order {
  id          String      @id @default(uuid())
  email       String
  name        String
  surname     String
  address     String
  city        String
  zipCode     String
  phone       String
  total       Float
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  status      Status     @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       OrderItem[]
}

model Size {
  id          String      @id @default(uuid())
  name        String
  products    ProductSize[]
  orderItems  OrderItem[]
}

model ProductSize {
  id          String      @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  size        Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId      String
  stock       Int
}

model OrderItem {
  id          String      @id @default(uuid())
  product     Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId   String?
  size        Size? @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  sizeId      String?
  quantity    Int
  description String?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
}

model Category {
  id          String      @id @default(uuid())
  name        String
  products    Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  price       Float
  sizes       ProductSize[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  images       Image[]
}

model Image {
  id          String      @id @default(uuid())
  name         String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  role     Role      @default(USER)
  password Password?
  orders   Order[]
}

model Password {
  id       String @id @default(uuid())
  hashedPassword String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
}